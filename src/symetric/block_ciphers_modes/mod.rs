//! Block ciphers chaining modes.
//!
//! Currently, these chaining modes are implemented:
//! - ECB
//! - CBC
//!
//! Each of these is defined in a struct and exposes the `cipher` and `decipher` static methods to
//! treat some amount of data (data length must be a multiple of block length).
//!
//! Chaining modes are compatible with all block ciphers defined in this crate.
//!
//! # Example
//!
//! ```
//! use crypto_lib::symetric::block_ciphers::aes::AES128;
//! use crypto_lib::symetric::block_ciphers_modes::common::BlockChaining;
//! use crypto_lib::symetric::block_ciphers_modes::ecb::ECB;
//!
//! let plain = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A, 0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
//! let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
//! let mut ciphertext = [0;32];
//! let expected = [0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97, 0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97];
//!
//! <ECB as BlockChaining<AES128>>::cipher(&plain, &mut ciphertext, &key).expect("Error during ECB_AES128 execution");
//!
//! assert_eq!(ciphertext, expected);
//! ```

pub mod common;
pub mod ecb;
pub mod cbc;