//! Definition of AES128, AES192 and AES256

use crate::symetric::block_ciphers::common::BlockCipher;

type StateAes = [[u8; 4]; 4];

const SBOX: [u8; 256] = [
0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16];

const INV_SBOX: [u8; 256] = [
0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

const RCON: [u8;10] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

fn sub_bytes(state: &mut StateAes) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = SBOX[state[i][j] as usize];
        }
    }
}

fn inv_sub_bytes(state: &mut StateAes) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = INV_SBOX[state[i][j] as usize];
        }
    }
}

fn shift_rows(state: &mut StateAes) {
    let mut tmp: StateAes = [[0;4];4];
    for r in 0..4 {
        for c in 0..4 {
            tmp[r][c] = state[r][(c+r)%4];
        }
    }
    *state = tmp;
}

fn inv_shift_rows(state: &mut StateAes) {
    let mut tmp: StateAes = [[0;4];4];
    for r in 0..4 {
        for c in 0..4 {
            tmp[r][c] = state[r][(4+c-r)%4];  // +4 because -1%4=???
        }
    }
    *state = tmp;
}

fn xtimes(nbr: u8) -> u8 {
    let tmp = nbr << 1;
    if nbr >> 7 == 1 {
       return tmp ^ 0x1B;
    }
    tmp
}

fn mix_column(col: &mut [u8;4]) {
    let mut tmp: [u8;4] = [0;4];
    tmp[0] = xtimes(col[0]) ^ xtimes(col[1]) ^ col[1] ^ col[2] ^ col[3];
    tmp[1] = col[0] ^ xtimes(col[1]) ^ xtimes(col[2]) ^ col[2] ^ col[3];
    tmp[2] = col[0] ^ col[1] ^ xtimes(col[2]) ^ xtimes(col[3]) ^ col[3];
    tmp[3] = xtimes(col[0]) ^ col[0] ^ col[1] ^ col[2] ^ xtimes(col[3]);

    *col = tmp;
}

fn inv_mix_column(col: &mut [u8;4]) {
    let mut tmp: [u8;4] = [0;4];

    let col_09: [u8;4] = col.iter().map(|x|
        xtimes(xtimes(xtimes(*x))) ^ x
    ).collect::<Vec<_>>().try_into().unwrap();

    let col_0b: [u8;4] = col.iter().map(|x|
        xtimes(xtimes(xtimes(*x))) ^ xtimes(*x) ^ x
    ).collect::<Vec<_>>().try_into().unwrap();

    let col_0d: [u8;4] = col.iter().map(|x|
        xtimes(xtimes(xtimes(*x))) ^ xtimes(xtimes(*x)) ^ x
    ).collect::<Vec<_>>().try_into().unwrap();

    let col_0e: [u8;4] = col.iter().map(|x|
        xtimes(xtimes(xtimes(*x))) ^ xtimes(xtimes(*x)) ^ xtimes(*x)
    ).collect::<Vec<_>>().try_into().unwrap();

    tmp[0] = col_0e[0] ^ col_0b[1] ^ col_0d[2] ^ col_09[3];
    tmp[1] = col_09[0] ^ col_0e[1] ^ col_0b[2] ^ col_0d[3];
    tmp[2] = col_0d[0] ^ col_09[1] ^ col_0e[2] ^ col_0b[3];
    tmp[3] = col_0b[0] ^ col_0d[1] ^ col_09[2] ^ col_0e[3];

    *col = tmp;
}

fn mix_columns(state: &mut StateAes) {
    for c in 0..4 {
        let mut tmp = [state[0][c], state[1][c], state[2][c], state[3][c]];
        mix_column(&mut tmp);
        for r in 0..4 {
            state[r][c] = tmp[r];
        }
    }
}

fn inv_mix_columns(state: &mut StateAes) {
    for c in 0..4 {
        let mut tmp = [state[0][c], state[1][c], state[2][c], state[3][c]];
        inv_mix_column(&mut tmp);
        for r in 0..4 {
            state[r][c] = tmp[r];
        }
    }
}

fn add_round_key(state: &mut StateAes, key: &[u8;16]) {
    for i in 0..4 {
        for j in 0..4 {
            state[j][i] ^= key[4*i+j];
        }
    }
}

fn rot_word(word: [u8;4]) -> [u8;4] {
    [word[1], word[2], word[3], word[0]]
}

fn sub_word(word: [u8;4]) -> [u8;4] {
    [SBOX[word[0] as usize], SBOX[word[1] as usize], SBOX[word[2] as usize], SBOX[word[3] as usize]]
}


macro_rules! define_aes {
    ( $aes_name:ident, $key_expansion_name:ident, $key_length:expr, $expanded_key_length:expr, $nk:expr, $nr:expr) => {
        pub struct $aes_name {}

        fn $key_expansion_name(key: &[u8; $key_length]) -> [u8; $expanded_key_length] {
            let mut i = 0;
            let nk = $nk;
            let nr = $nr;
            let mut expanded: [u8; $expanded_key_length] = [0; $expanded_key_length];

            while i <= nk - 1 {
                for j in 0..4 {
                    expanded[4*i+j] = key[4*i+j];
                }
                i += 1;
            }

            while i <= 4*nr+3 {
                let mut temp = [expanded[4*(i-1)], expanded[4*(i-1)+1], expanded[4*(i-1)+2], expanded[4*(i-1)+3]];
                if i % nk == 0 {
                    temp = sub_word(rot_word(temp));
                    temp[0] ^= RCON[i/nk-1];
                } else if nk > 6 && i % nk == 4 {
                    temp = sub_word(temp);
                }
                for j in 0..4 {
                    expanded[4*i+j] = expanded[4*(i-nk)+j] ^ temp[j];
                }
                i += 1;
            }

            expanded
        }

        impl BlockCipher for $aes_name {
            const KEY_SIZE: usize = $key_length;
            const BLOCK_SIZE: usize = 16;
            
            type KeyType = [u8; $key_length];
            type BlockType = [u8; 16];

            fn cipher(plaintext: &Self::BlockType, ciphertext: &mut Self::BlockType, key: &Self::KeyType) -> Result<(), &'static str> {
                let nr = $nr;
                let mut state: StateAes = [[0;4];4];

                // key expansion
                let key_expanded = $key_expansion_name(key);

                // copy plaintext into state
                for i in 0..4 {
                    for j in 0..4 {
                        state[j][i] = plaintext[4*i+j];
                    }
                }

                // first add_round_key
                add_round_key(&mut state, &key_expanded[0..4*4].try_into().unwrap());

                // for rounds from 1 to Nr - 1
                for round in 1..nr {
                    sub_bytes(&mut state);
                    shift_rows(&mut state);
                    mix_columns(&mut state);
                    add_round_key(&mut state, &key_expanded[4*4*round..4*(4*round+4)].try_into().unwrap());
                }

                // last round
                sub_bytes(&mut state);
                shift_rows(&mut state);
                add_round_key(&mut state, &key_expanded[4*4*nr..4*(4*nr+4)].try_into().unwrap());

                // copy state into ciphertext
                for i in 0..4 {
                    for j in 0..4 {
                        ciphertext[4*i+j] = state[j][i];
                    }
                }

                return Ok(());
            }

            fn decipher(plaintext: &mut Self::BlockType, ciphertext: &Self::BlockType, key: &Self::KeyType) -> Result<(), &'static str> {
                let nr = $nr;
                let mut state: StateAes = [[0;4];4];

                // key expansion
                let key_expanded = $key_expansion_name(key);

                // copy ciphertext into state
                for i in 0..4 {
                    for j in 0..4 {
                        state[j][i] = ciphertext[4*i+j];
                    }
                }

                // first add_round_key
                add_round_key(&mut state, &key_expanded[4*4*nr..4*(4*nr+4)].try_into().unwrap());

                // for rounds from Nr - 1 to 1
                for round in (1..nr).rev() {
                    inv_shift_rows(&mut state);
                    inv_sub_bytes(&mut state);
                    add_round_key(&mut state, &key_expanded[4*4*round..4*(4*round+4)].try_into().unwrap());
                    inv_mix_columns(&mut state);
                }

                // last round
                inv_shift_rows(&mut state);
                inv_sub_bytes(&mut state);
                add_round_key(&mut state, &key_expanded[0..4*4].try_into().unwrap());

                // copy state into plaintext
                for i in 0..4 {
                    for j in 0..4 {
                        plaintext[4*i+j] = state[j][i];
                    }
                }

                return Ok(());
            }
        }
    }
}

define_aes!(AES128, key_expansion128, 16, 176, 4, 10);
define_aes!(AES192, key_expansion192, 24, 208, 6, 12);
define_aes!(AES256, key_expansion256, 32, 240, 8, 14);


#[cfg(test)]
mod tests_aes {
    use super::*;

    #[test]
    fn aes128_encrypt() {
        let plain = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
        let mut ciphertext = [0;16];
        let expected = [0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97];
        AES128::cipher(&plain, &mut ciphertext, &key).expect("Error during AES128 execution");
        assert_eq!(ciphertext, expected);
    }

    #[test]
    fn aes192_encrypt() {
        let plain = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        let key = [0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B];
        let mut ciphertext = [0;16];
        let expected = [0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F, 0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC];
        AES192::cipher(&plain, &mut ciphertext, &key).expect("Error during AES192 execution");
        assert_eq!(ciphertext, expected);
    }

    #[test]
    fn aes256_encrypt() {
        let plain = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        let key = [0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4];
        let mut ciphertext = [0;16];
        let expected = [0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8];
        AES256::cipher(&plain, &mut ciphertext, &key).expect("Error during AES256 execution");
        assert_eq!(ciphertext, expected);
    }

    #[test]
    fn aes128_decrypt() {
        let mut plain = [0;16];
        let key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c];
        let ciphertext = [0x3A, 0xD7, 0x7B, 0xB4, 0x0D, 0x7A, 0x36, 0x60, 0xA8, 0x9E, 0xCA, 0xF3, 0x24, 0x66, 0xEF, 0x97];
        let expected = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        AES128::decipher(&mut plain, &ciphertext, &key).expect("Error during AES128 execution");
        assert_eq!(plain, expected);
    }

    #[test]
    fn aes192_decrypt() {
        let mut plain = [0;16];
        let key = [0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52, 0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5, 0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B];
        let ciphertext = [0xBD, 0x33, 0x4F, 0x1D, 0x6E, 0x45, 0xF2, 0x5F, 0xF7, 0x12, 0xA2, 0x14, 0x57, 0x1F, 0xA5, 0xCC];
        let expected = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        AES192::decipher(&mut plain, &ciphertext, &key).expect("Error during AES192 execution");
        assert_eq!(plain, expected);
    }

    #[test]
    fn aes256_decrypt() {
        let mut plain = [0;16];
        let key = [0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE, 0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81, 0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7, 0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4];
        let ciphertext = [0xF3, 0xEE, 0xD1, 0xBD, 0xB5, 0xD2, 0xA0, 0x3C, 0x06, 0x4B, 0x5A, 0x7E, 0x3D, 0xB1, 0x81, 0xF8];
        let expected = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96, 0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A];
        AES256::decipher(&mut plain, &ciphertext, &key).expect("Error during AES256 execution");
        assert_eq!(plain, expected);
    }
}

